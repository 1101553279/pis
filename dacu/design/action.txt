com list:
            com_info
              |
              V
             ---         ---         ---
chead--->   |   | ----> |   | ----> |   | .......->null;
             ---         ---         ---

pcom:
    d <---- p   get:request
        step1: fill information && add (pecu request) to comlist
        step2: led_con( lt_pcom, pno, le_blink );  
                                                // lt_pcom -> led type: passenger communication
                                                // pno, pecu number | which pecu request
                                                // le_blink -> led event blink
        step3: loud_con( ut_pcom, pno, ue_tip  );   
                                                // ut_pcom  -> loud type 
                                                // pno: pecu number
                                                // ue_tip -> loud event tip

    d <---- p   get: hangup
        step1: remove from comlist
        step2: led_con( lt_pcom, pno, le_close );  // stop led blink
        step3: loud_con( ut_pcom, pno, ue_close ); // close ue_tip

    d <---- d:  get: response
        step1: remove from comlist && put into setup
                    setup.status = frozen
        setp2: led_con( lt_pcom, pno, le_on );      // set led always on
        setp3: loud_con( ut_pcom, pno, ue_close );  // close ue_tip

    d <---- d   get: hangup
        step1: set setup->status
                    setup.status = idle
        step2: led_con( lt_pcom, 0, led_close );    // set led off

    button pushed( into com && outo com )
        into com:
            step1: send into com notification to deevice group by network
                        control uic to tell intocom
            step2: remove from comlist && put into setup
                        setup.status = setup
            step3: led_con( lt_pcom, pno, led_on );  // set led always on
            step4: loud_con( ut_pcom, pno, ue_com ); // set ue_com
            step5: ppt_con( pt_com, pe_open );       // set ppt using
       ------------------------------------------------------------------
        outo com:
            step1: send hangup  notification to device group by network
                        control uic to tell hangup
            step2: set setup->status 
                        setup.status = idle
            step3: led_con( lt_pcom, 0, led_close );    // set led off
            step4: loud_con( ut_pcom, pno, ue_close );  // set loud close
            step5: ppt_con( pt_com, pe_close );         // set ppt close


dcom:
    d <---- d   get:request
        step1: fill information && add (dacu request) to comlist
        step2: led_con( lt_dcom, 0, le_blink );  
                                                // lt_dcom -> led type: driver communication
                                                // le_blink -> led event blink
        step3: loud_con( ut_dcom, pno, ue_tip  );   
                                                // ut_pcom  -> loud type 
                                                // ue_tip -> loud event tip

    d <---- p   get: hangup
        step1: remove from comlist
        step2: led_con( lt_pcom, pno, le_close );  // stop led blink
        step3: loud_con( ut_pcom, ue_close );       // close ue_tip

    d <---- d:  get: response
        step1: remove from comlist && put into setup
                    setup.status = frozen
        setp2: led_con( lt_pcom, pno, le_on );      // set led always on
        setp3: loud_con( ut_pcom, ue_close );       // close ue_tip

    d <---- d   get: hangup
        step1: set setup->status
                    setup.status = idle
        step2: led_con( lt_pcom, 0, led_close );    // set led off

    button pushed( into com && outo com )
        into com:
            step1: send into com notification to deevice group by network
                        control uic to tell intocom
            step2: remove from comlist && put into setup
                        setup.status = setup
            step3: led_con( lt_pcom, pno, led_on );     // set led always on
            step4: loud_con( ut_pcom, ue_com );         // set ue_com
            step5: ppt_con( pt_com, pe_open );          // set ppt using
       ------------------------------------------------------------------
        outo com:
            step1: send outocom notification to device group by network
                        control uic to tell outocom
            step2: set setup->status 
                        setup.status = idle
            step3: led_con( lt_pcom, 0, led_close );    // set led off
            step4: loud_con( ut_pcom, ue_close );       // set loud close
            step5: ppt_con( pt_com, pe_close );         // set ppt close





