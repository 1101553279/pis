event collections:

1>>. intercom between passenger and driver

    procedure:
    step1: d <---- p   get: request

                    step2: d <---- p   get: cancel

    step3: d ----> p   post: response

    step4: d ----> p   post: hang up

*** events:
        network:
            d <---- p   get: request
            d <---- p/d get: hangup ( pecu and dacu hangup )
            d <---- d   get: response

        button:
            pushed

2>>. intercom between two driver

    procedure:
    as master:
        step1: md ----> sd  post: request

                    step2: md ----> sd  post: cancel

        step3: md <---- sd  get: response

                    step4: md <---- sd   get: hang up

        step5: md ----> sd  post: hang up

    as slave:
        step1: sd <---- md  get: request

                    step2: sd <---- md  get: hangup

        step3: sd ----> md  post: respone

                    step4: sd ----> md  post: hang up

        step5: sd <---- md  get: hang up
    
*** events:
        network / uic:
            d <---- d   get: request
            d <---- d   get: hangup ( host and end hangup )
            d <---- d   get: response

        button:
            pushed
        
        timeout:
            call timeout
        
3>>. occ listen
    occ listen

    procedure:
        step1: d <---- r    post: start
        step2: d <---- r    post: stop

*** events:
        network:
            d <---- r   get: start
            d <---- r   get: stop

    * occ can interupt broadcast but can not interrupt com

4>>. pa in / out 
    public announces by in or out

    procedure:
        step1: d ----> r    post: request
        step2: d <---- r    get: response

*** events:
        network:
            d <---- r   get: response   ( tell uic idle )

        button:
            pa_in pushed
            pa_out pushed

        timeout
            request timeout ( pa in/out )


5>>. broadcast listenning
    broadcast && other driver pa
   
    procedure: 
        step1: d <---- u    post: start
        step2: d <---- u    post: stop

*** events:
        network:
            d <---- u   get: start
            d <---- u   get: stop

*new adding
6>>. louder object

    events:          
        broadcast_lsn
        spking       
        occ_lsn      
        com_tip      
        com_ing      
        close

louder status:
    *   *   *   *   *   *   status              prior
    |   |   |   |   |   |-- idle                0
    |   |   |   |   |------ broadcast_lsning    1
    |   |   |   |---------- spking              2
    |   |   |-------------- occ_lsning          3
    |   |------------------ com_tiping          4
    |---------------------- coming              5

    event           prior
-------------------------------
    broadcast_lsn   1
    spk             3
    occ_lsn         3               <-------|
    com_tip         4                       |
    com_ing         5                       |
    close           6                       |
                                            |
    event_status = status_get( event );------
    if( event_status > cur_status )        // event prior > cur louder status prior
    {
        execute louder action;

        cur_status = event_status % 6;
            or 
        cur_status = ( event_status == closing )? idle: event_status;
            or
/*
        if( event_status == closing )
            cur_status = idle;
        else
            cur_status = event_status;
*/
    }

led event:

    led status:
    *   *   *   status      prior
    |   |   |-- off         0
    |   |------ blink       1
    |---------- on          2
    
    event:      prior
----------------------
    blink       1
    turn_on     2
    close       3


chip_pca event:
// pca9539, 00, mask                             
// output: uic78, uic56, loud, volume, mic       
// input: uic78, uic56, diag_uic78, diag_uic56   

mask: 0x0FFF
output:
    spe         pins        mask    level   list
    mic         12,4        0x0808   h/l    open mic / close mic
    loud        1,2,3,5,11  0x0417          for com / pa 
    uic78       9,10        0x0300   h/l    for driver com
    uic56       8           0x0080   h/l    for send pa
    volume      6,7         0x0060   h/l    change volume size

mask: 0xF000
input:
    spe         pins        mask    level   list
    diag_uic78  16          0x8000          for driver com   uic78 error
    diag_uic56  15          0x4000          for listen       uic78 error
    uic78       14          0x2000          for driver com
    uic56       13          0x1000          for listen


                                                 
// pca9539, 01, mask                             
// output: none                                  
// input: ip                                     
output:
    none

mask: 0x00FF
input:
    spe         pins        mask    level   list
    ip          1 ~ 8       0x00FF          read ip
                                                 
// pca9539, 10, mask                             
// output: led                                   
// input: button, ppt                            

mask: 0x0F00
output:
    spe         pins        mask    level   list
    led         9 ~ 12      0x0F00          control leds

mask: 0x001F
input:
    spe         pins        mask    level   list
    button      1 ~ 4       0x000F          read button pushed
    ppt         5           0x0010          read ppt    puhsed

summary:
no  which       event           op
1   all         interrupt
                                step1: read all pca9539
                                step2: lieterate all pca9539
                                       find one input event  && fill info
    pca_00 output
2               mic

3               loud

4               uic78

5               uic56

6               volume

    pca_01

    pca_10 output
7               led
















